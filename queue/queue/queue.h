//	******************************************************************************
//
//  SALVADOR VILLALON PRACTICE
//	queue.h
//
//	An implementation of a queue using a SinglyLinked List with head and tail
//
//	********************************************************************************


// The preprocessor examines the code before actual compilation of code begins and 
// resolves all these directives before any code is actually generated by 
// regular statements.
// Why do we need this?
// This is necesarry so the file is not included multiple times, 
#ifndef QUEUE_H
#define QUEUE_H


class Queue 
{

private:
	struct Node 
	{
		int info;
		Node * next;
		Node(int new_info) 
		{
			info = new_info;
			next = nullptr;
		}
	};

	// Point to first node in list
	Node * head;

	// Points to last node in list
	Node * tail;

public:

	// Constructor
	// ---------------------------------------------
	Queue();


	// Destructor
	// ---------------------------------------------
	~Queue();


	// Add to queue
	// ---------------------------------------------
	void add(int new_item);


	// Remove from queue
	// ---------------------------------------------
	int remove();


	// Return first element of queue
	// ---------------------------------------------
	int peek();


	// Check if queue is empty
	// ---------------------------------------------
	bool is_empty();

	// Print Queue
	// ---------------------------------------------
	void print_queue();
};

#endif