//	******************************************************************************
//	
//  SALVADOR VILLALON PRACTICE
//	doubly_linkedlist.h
// 
//	An implementation of a Doublly Linkedlist with a head and tail pointer
//	
//	********************************************************************************


// The preprocessor examines the code before actual compilation of code begins and 
// resolves all these directives before any code is actually generated by 
// regular statements.
// Why do we need this?
// This is necesarry so the file is not included multiple times, 
#ifndef DOUBLYLINKEDLIST_H
#define DOUBLYLINKEDLIST_H

class DoublyLinkedList
{

private:
	struct Node 
	{
		Node * next;
		Node * prev;
		int info;

		Node(int input) 
		{
			next = nullptr;
			prev = nullptr;
			info = input;
		}
	};

	// Give us access to the list
	Node * head;
	Node * tail;

public:
	DoublyLinkedList();

	~DoublyLinkedList();

	void add_to_front(int input);

	void add_to_end(int input);

	void remove_front();

	void remove_last();

	int get_first_node();

	int index(int input_index);

	void print_nodes();
	
	void insert_node_at_position(int data, int position);
};

#endif