//	*******************************************************************************
//
//  SALVADOR VILLALON PRACTICE
//	stack.h
//
//	An implementation of a Stack using a SinglyLInkedList
//
//	********************************************************************************

// The preprocessor examines the code before actual compilation of code begins and
// resolves all these directives before any code is actually generated by
// regular statements.
// Why do we need this?
// This is necesarry so the file is not included multiple times,
#ifndef STACK_H
#define STACK_H


class Stack
{
private:
	struct Node
	{
		int info;
		Node * next;

		Node(int new_info)
		{
			info = new_info;
			next = nullptr;
		}
	};

	// Points to first node in the list
	Node * head;

public:

	// Constructor
	// ---------------------------------------------
	Stack();

	// Destructor
	// ---------------------------------------------
	~Stack();

	// REMOVE FROM STACK
	// ---------------------------------------------
	int pop();

	// ADD TO STACK
	// ---------------------------------------------
	void push(int new_element);

	// GET FIRST VALUE OF STACK
	// ---------------------------------------------
	int peek();

	// CHECK IF STACK IS EMPTY
	// ---------------------------------------------
	bool is_empty();

	// PRINT STACK
	// ---------------------------------------------
	void print_stack();
};

#endif
